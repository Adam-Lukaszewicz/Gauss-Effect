.data
.code
basicTrfAsm PROC
;RCX ma adres pocz¹tku, RDX ma adres koñca zakresu
;RCX s³u¿y jako "iterator"
;SIL (8-bitowa czêœæ RSI) to bufor
XOR RAX, RAX ;Zerowanie akumulatora
MYLOOP:
	mov SIL, BYTE PTR [RCX]
	add SIL, 100
	MOV [RCX], SIL
	CMP RCX, RDX
	JE OVER
	INC RCX
	JMP MYLOOP
OVER:
	mov RAX, 1
	ret
basicTrfAsm endp
gaussTrfAsm PROC
;ADD RCX, 15
;ADD R8, 15
;STORING BASE ADDRESS POINTERS---------
MOV R10, RCX
MOV R11, R8
;PREPARE OFFSET VALUES-----------------
MOV RSI, R9
MOV RDI, R9
IMUL RSI, RSI, 6
IMUL RDI, RDI, 3
;SUB RDX, 15
;JMP VERTICAL
;LOOP 1x5 MATRIX-----------------------
HORIZONTAL:
	;END LOOP CHECK--------------------
	CMP RCX, RDX
	JGE TRANSITION
	;LOAD------------------------------
	VPMOVZXBW YMM0, XMMWORD PTR[RCX-6]
	VPMOVZXBW YMM1, XMMWORD PTR[RCX-3]
	VPMOVZXBW YMM2, XMMWORD PTR[RCX]
	VPMOVZXBW YMM3, XMMWORD PTR[RCX+3]
	VPMOVZXBW YMM4, XMMWORD PTR[RCX+6]
	;MULTIPLY--------------------------
	VPADDW YMM1, YMM1, YMM1
	VPADDW YMM1, YMM1, YMM1
	VPADDW YMM3, YMM3, YMM3
	VPADDW YMM3, YMM3, YMM3
	VPADDW YMM6, YMM2, YMM2
	VPADDW YMM2, YMM6, YMM6
	VPADDW YMM2, YMM2, YMM6
	;ADD-------------------------------
	VPADDW YMM0, YMM0, YMM1
	VPADDW YMM0, YMM0, YMM2
	VPADDW YMM0, YMM0, YMM3
	VPADDW YMM0, YMM0, YMM4
	;DIVIDE----------------------------
	VPSRLW YMM0, YMM0, 4
	;CONVERT TO BYTE-------------------
	VPACKUSWB YMM0, YMM0, YMM0
	;PERMUTATE 3,1,2,0->11011000->216--
	VPERMQ YMM0, YMM0, 216 
	;STORE RESULT----------------------
	;VMOVDQU XMMWORD PTR [R8], XMM0
	;ITERATE LOOP----------------------
	ADD RCX, 16
	ADD R8, 16
	JMP HORIZONTAL
;RESTORE BASE ADDRESS POINTERS---------
TRANSITION:
	MOV RCX, R10
	MOV R8, R11
;LOOP 5x1 MATRIX-----------------------
VERTICAL:
	;END LOOP CHECK--------------------
	CMP RCX, RDX
	JGE OVER
	;PREPARE OFFSETS-------------------
	MOV R15, R8
	SUB R15, RSI
	MOV R14, R8
	SUB R14, RDI
	;LOAD------------------------------
	VPMOVZXBW YMM0, XMMWORD PTR[R15]
	VPMOVZXBW YMM1, XMMWORD PTR[R14]
	VPMOVZXBW YMM2, XMMWORD PTR[R8]
	VPMOVZXBW YMM3, XMMWORD PTR[R8+RDI]
	VPMOVZXBW YMM4, XMMWORD PTR[R8+RSI]
	;MULTIPLY--------------------------
	VPADDW YMM1, YMM1, YMM1
	VPADDW YMM1, YMM1, YMM1
	VPADDW YMM3, YMM3, YMM3
	VPADDW YMM3, YMM3, YMM3
	VPADDW YMM6, YMM2, YMM2
	VPADDW YMM2, YMM6, YMM6
	VPADDW YMM2, YMM2, YMM6
	;ADD-------------------------------
	VPADDW YMM0, YMM0, YMM1
	VPADDW YMM0, YMM0, YMM2
	VPADDW YMM0, YMM0, YMM3
	VPADDW YMM0, YMM0, YMM4
	;DIVIDE----------------------------
	VPSRLW YMM0, YMM0, 4
	;CONVERT TO BYTE-------------------
	VPACKUSWB YMM0, YMM0, YMM0
	;PERMUTATE 3,1,2,0->11011000->216--
	VPERMQ YMM0, YMM0, 216
	;STORE RESULT----------------------
	;VMOVDQU XMMWORD PTR [RCX], XMM0
	;ITERATE LOOP----------------------
	ADD RCX, 16
	ADD R8, 16
	JMP VERTICAL
OVER:
	mov RAX, 1
	ret
gaussTrfAsm endp
badAsm PROC
;STORING BASE ADDRESS POINTERS---------
MOV R10, RCX
MOV R11, R8
;PREPARE OFFSET VALUES-----------------
MOV RSI, R9
MOV RDI, R9
IMUL RSI, RSI, 6
IMUL RDI, RDI, 3
;SUB RDX, 15
;JMP VERTICAL
;LOOP 1x5 MATRIX-----------------------
HORIZONTAL:
	;END LOOP CHECK--------------------
	CMP RCX, RDX
	JGE TRANSITION
	;LOAD------------------------------
	PMOVZXBW XMM0, QWORD PTR[RCX-6]
	PMOVZXBW XMM1, QWORD PTR[RCX-3]
	PMOVZXBW XMM2, QWORD PTR[RCX]
	PMOVZXBW XMM3, QWORD PTR[RCX+3]
	PMOVZXBW XMM4, QWORD PTR[RCX+6]
	;MULTIPLY--------------------------
	PADDW XMM1, XMM1
	PADDW XMM1, XMM1
	PADDW XMM3, XMM3
	PADDW XMM3, XMM3
	PADDW XMM2, XMM2
	MOVDQU XMM6, XMM2
	PADDW XMM2, XMM2
	PADDW XMM2, XMM6
	;ADD-------------------------------
	PADDW XMM0, XMM1
	PADDW XMM0, XMM2
	PADDW XMM0, XMM3
	PADDW XMM0, XMM4
	;DIVIDE----------------------------
	PSRLW XMM0, 4
	;CONVERT TO BYTE-------------------
	PACKUSWB XMM0, XMM0
	;STORE RESULT----------------------
	PEXTRQ QWORD PTR [R8], XMM0, 0
	;ITERATE LOOP----------------------
	ADD RCX, 8
	ADD R8, 8
	JMP HORIZONTAL
;RESTORE BASE ADDRESS POINTERS---------
TRANSITION:
	MOV RCX, R10
	MOV R8, R11
;LOOP 5x1 MATRIX-----------------------
VERTICAL:
	;END LOOP CHECK--------------------
	CMP RCX, RDX
	JGE OVER
	;PREPARE OFFSETS-------------------
	MOV R15, R8
	SUB R15, RSI
	MOV R14, R8
	SUB R14, RDI
	;LOAD------------------------------
	PMOVZXBW XMM0, QWORD PTR[R15]
	PMOVZXBW XMM1, QWORD PTR[R14]
	PMOVZXBW XMM2, QWORD PTR[R8]
	PMOVZXBW XMM3, QWORD PTR[R8+RDI]
	PMOVZXBW XMM4, QWORD PTR[R8+RSI]
	;MULTIPLY--------------------------
	PADDW XMM1, XMM1
	PADDW XMM1, XMM1
	PADDW XMM3, XMM3
	PADDW XMM3, XMM3
	PADDW XMM2, XMM2
	MOVDQU XMM6, XMM2
	PADDW XMM2, XMM2
	PADDW XMM2, XMM6
	;ADD-------------------------------
	PADDW XMM0, XMM1
	PADDW XMM0, XMM2
	PADDW XMM0, XMM3
	PADDW XMM0, XMM4
	;DIVIDE----------------------------
	PSRLW XMM0, 4
	;CONVERT TO BYTE-------------------
	PACKUSWB XMM0, XMM0
	;STORE RESULT----------------------
	PEXTRQ QWORD PTR [RCX], XMM0, 0
	;ITERATE LOOP----------------------
	ADD RCX, 8
	ADD R8, 8
	JMP VERTICAL
OVER:
	mov RAX, 1
	ret
badAsm endp
END